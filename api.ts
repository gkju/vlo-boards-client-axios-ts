/* tslint:disable */
/* eslint-disable */
/**
 * ASP.NETCore_suvlo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: gkjuszczyk@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccountsDataModelsDataModelsApplicationUser
 */
export interface AccountsDataModelsDataModelsApplicationUser {
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'userName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'normalizedUserName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'normalizedEmail'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'emailConfirmed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'phoneNumberConfirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'twoFactorEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'lockoutEnd'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'lockoutEnabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'accessFailedCount'?: number;
    /**
     * 
     * @type {AccountsDataModelsDataModelsProfilePicture}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'profilePicture'?: AccountsDataModelsDataModelsProfilePicture;
    /**
     * 
     * @type {number}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'socialCredit'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'hasPassword'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'fidoCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'usedBytes'?: number;
    /**
     * 
     * @type {number}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'maxBytes'?: number;
}
/**
 * 
 * @export
 * @interface AccountsDataModelsDataModelsArticle
 */
export interface AccountsDataModelsDataModelsArticle {
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'articleId'?: string | null;
    /**
     * 
     * @type {AccountsDataModelsDataModelsApplicationUser}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'author'?: AccountsDataModelsDataModelsApplicationUser;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'title'?: string | null;
    /**
     * 
     * @type {Array<AccountsDataModelsDataModelsTag>}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'tags'?: Array<AccountsDataModelsDataModelsTag> | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'modifiedOn'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'public'?: boolean;
    /**
     * 
     * @type {Array<AccountsDataModelsDataModelsApplicationUser>}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'editors'?: Array<AccountsDataModelsDataModelsApplicationUser> | null;
    /**
     * 
     * @type {Array<AccountsDataModelsDataModelsApplicationUser>}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'reviewers'?: Array<AccountsDataModelsDataModelsApplicationUser> | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'contentJson'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'contentText'?: string | null;
    /**
     * 
     * @type {Array<Revision>}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'revisions'?: Array<Revision> | null;
    /**
     * 
     * @type {boolean}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'autoPublish'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'autoPublishOn'?: string;
    /**
     * 
     * @type {AccountsDataModelsDataModelsFile}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'picture'?: AccountsDataModelsDataModelsFile;
    /**
     * 
     * @type {Set<AccountsDataModelsDataModelsReaction>}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'reactions'?: Set<AccountsDataModelsDataModelsReaction> | null;
    /**
     * 
     * @type {Array<AccountsDataModelsDataModelsComment>}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'comments'?: Array<AccountsDataModelsDataModelsComment> | null;
}
/**
 * 
 * @export
 * @interface AccountsDataModelsDataModelsComment
 */
export interface AccountsDataModelsDataModelsComment {
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsComment
     */
    'id'?: string | null;
    /**
     * 
     * @type {AccountsDataModelsDataModelsApplicationUser}
     * @memberof AccountsDataModelsDataModelsComment
     */
    'author'?: AccountsDataModelsDataModelsApplicationUser;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsComment
     */
    'content'?: string | null;
    /**
     * 
     * @type {AccountsDataModelsDataModelsFile}
     * @memberof AccountsDataModelsDataModelsComment
     */
    'file'?: AccountsDataModelsDataModelsFile;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsComment
     */
    'createdOn'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsComment
     */
    'modifiedOn'?: string;
    /**
     * 
     * @type {AccountsDataModelsDataModelsComment}
     * @memberof AccountsDataModelsDataModelsComment
     */
    'inReplyTo'?: AccountsDataModelsDataModelsComment;
    /**
     * 
     * @type {Set<AccountsDataModelsDataModelsReaction>}
     * @memberof AccountsDataModelsDataModelsComment
     */
    'reactions'?: Set<AccountsDataModelsDataModelsReaction> | null;
}
/**
 * 
 * @export
 * @interface AccountsDataModelsDataModelsFile
 */
export interface AccountsDataModelsDataModelsFile {
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsFile
     */
    'objectId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsFile
     */
    'bucket'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AccountsDataModelsDataModelsFile
     */
    'backedInMinio'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AccountsDataModelsDataModelsFile
     */
    'userManageable'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AccountsDataModelsDataModelsFile
     */
    'public'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsFile
     */
    'fileName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsFile
     */
    'contentType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsFile
     */
    'ownerId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AccountsDataModelsDataModelsFile
     */
    'byteSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsFile
     */
    'parentId'?: string | null;
    /**
     * 
     * @type {AccountsDataModelsDataModelsFolder}
     * @memberof AccountsDataModelsDataModelsFile
     */
    'parent'?: AccountsDataModelsDataModelsFolder;
}
/**
 * 
 * @export
 * @interface AccountsDataModelsDataModelsFolder
 */
export interface AccountsDataModelsDataModelsFolder {
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsFolder
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsFolder
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsFolder
     */
    'ownerId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsFolder
     */
    'masterFolderId'?: string | null;
}
/**
 * 
 * @export
 * @interface AccountsDataModelsDataModelsProfilePicture
 */
export interface AccountsDataModelsDataModelsProfilePicture {
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsProfilePicture
     */
    'id'?: string | null;
    /**
     * 
     * @type {AccountsDataModelsDataModelsFile}
     * @memberof AccountsDataModelsDataModelsProfilePicture
     */
    'picture'?: AccountsDataModelsDataModelsFile;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsProfilePicture
     */
    'ownerId'?: string | null;
}
/**
 * 
 * @export
 * @interface AccountsDataModelsDataModelsReaction
 */
export interface AccountsDataModelsDataModelsReaction {
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsReaction
     */
    'id'?: string | null;
    /**
     * 
     * @type {AccountsDataModelsDataModelsApplicationUser}
     * @memberof AccountsDataModelsDataModelsReaction
     */
    'user'?: AccountsDataModelsDataModelsApplicationUser;
    /**
     * 
     * @type {AccountsDataModelsDataModelsReactionType}
     * @memberof AccountsDataModelsDataModelsReaction
     */
    'reactionType'?: AccountsDataModelsDataModelsReactionType;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const AccountsDataModelsDataModelsReactionType = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type AccountsDataModelsDataModelsReactionType = typeof AccountsDataModelsDataModelsReactionType[keyof typeof AccountsDataModelsDataModelsReactionType];


/**
 * 
 * @export
 * @interface AccountsDataModelsDataModelsTag
 */
export interface AccountsDataModelsDataModelsTag {
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsTag
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsTag
     */
    'authorId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsTag
     */
    'content'?: string | null;
}
/**
 * 
 * @export
 * @interface MicrosoftAspNetCoreMvcProblemDetails
 */
export interface MicrosoftAspNetCoreMvcProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof MicrosoftAspNetCoreMvcProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftAspNetCoreMvcProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftAspNetCoreMvcProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftAspNetCoreMvcProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftAspNetCoreMvcProblemDetails
     */
    'instance'?: string | null;
}
/**
 * 
 * @export
 * @interface Revision
 */
export interface Revision {
    /**
     * 
     * @type {string}
     * @memberof Revision
     */
    'revisionId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Revision
     */
    'contentJson'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Revision
     */
    'modifiedOn'?: string;
    /**
     * 
     * @type {string}
     * @memberof Revision
     */
    'articleId'?: string | null;
}
/**
 * 
 * @export
 * @interface VloMainAreasArticleArticleControllerArticleBoolInput
 */
export interface VloMainAreasArticleArticleControllerArticleBoolInput {
    /**
     * 
     * @type {string}
     * @memberof VloMainAreasArticleArticleControllerArticleBoolInput
     */
    'articleId'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof VloMainAreasArticleArticleControllerArticleBoolInput
     */
    'public'?: boolean;
}
/**
 * 
 * @export
 * @interface VloMainAreasArticleArticleControllerArticleDateInput
 */
export interface VloMainAreasArticleArticleControllerArticleDateInput {
    /**
     * 
     * @type {string}
     * @memberof VloMainAreasArticleArticleControllerArticleDateInput
     */
    'publishOn'?: string;
    /**
     * 
     * @type {string}
     * @memberof VloMainAreasArticleArticleControllerArticleDateInput
     */
    'articleId'?: string | null;
}
/**
 * 
 * @export
 * @interface VloMainAreasArticleArticleControllerArticleTitleInput
 */
export interface VloMainAreasArticleArticleControllerArticleTitleInput {
    /**
     * 
     * @type {string}
     * @memberof VloMainAreasArticleArticleControllerArticleTitleInput
     */
    'articleId': string;
    /**
     * 
     * @type {string}
     * @memberof VloMainAreasArticleArticleControllerArticleTitleInput
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface VloMainAreasArticleArticleUpdateInput
 */
export interface VloMainAreasArticleArticleUpdateInput {
    /**
     * 
     * @type {string}
     * @memberof VloMainAreasArticleArticleUpdateInput
     */
    'articleId': string;
    /**
     * 
     * @type {string}
     * @memberof VloMainAreasArticleArticleUpdateInput
     */
    'contentJson': string;
}
/**
 * 
 * @export
 * @interface VloMainAreasArticleUserArticleInput
 */
export interface VloMainAreasArticleUserArticleInput {
    /**
     * 
     * @type {string}
     * @memberof VloMainAreasArticleUserArticleInput
     */
    'articleId': string;
    /**
     * 
     * @type {string}
     * @memberof VloMainAreasArticleUserArticleInput
     */
    'userId': string;
}

/**
 * ArticleApi - axios parameter creator
 * @export
 */
export const ArticleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [content] 
         * @param {string} [articleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleAddCommentPost: async (content?: string, articleId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Articles/Article/AddComment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (content !== undefined) {
                localVarQueryParameter['content'] = content;
            }

            if (articleId !== undefined) {
                localVarQueryParameter['ArticleId'] = articleId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VloMainAreasArticleUserArticleInput} [vloMainAreasArticleUserArticleInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleAddEditorPut: async (vloMainAreasArticleUserArticleInput?: VloMainAreasArticleUserArticleInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Articles/Article/AddEditor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vloMainAreasArticleUserArticleInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AccountsDataModelsDataModelsReactionType} [reactionType] 
         * @param {string} [articleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleAddReactionPost: async (reactionType?: AccountsDataModelsDataModelsReactionType, articleId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Articles/Article/AddReaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (reactionType !== undefined) {
                localVarQueryParameter['reactionType'] = reactionType;
            }

            if (articleId !== undefined) {
                localVarQueryParameter['ArticleId'] = articleId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [articleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleGetArticleGet: async (articleId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Articles/Article/GetArticle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (articleId !== undefined) {
                localVarQueryParameter['ArticleId'] = articleId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [articleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleGetContentGet: async (articleId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Articles/Article/GetContent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (articleId !== undefined) {
                localVarQueryParameter['ArticleId'] = articleId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [articleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleGetPictureGet: async (articleId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Articles/Article/GetPicture`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (articleId !== undefined) {
                localVarQueryParameter['ArticleId'] = articleId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [articleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleGetTagsGet: async (articleId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Articles/Article/GetTags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (articleId !== undefined) {
                localVarQueryParameter['ArticleId'] = articleId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a blank article and returns its ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticlePost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Articles/Article`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VloMainAreasArticleArticleUpdateInput} [vloMainAreasArticleArticleUpdateInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticlePut: async (vloMainAreasArticleArticleUpdateInput?: VloMainAreasArticleArticleUpdateInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Articles/Article`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vloMainAreasArticleArticleUpdateInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VloMainAreasArticleUserArticleInput} [vloMainAreasArticleUserArticleInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleRemoveEditorDelete: async (vloMainAreasArticleUserArticleInput?: VloMainAreasArticleUserArticleInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Articles/Article/RemoveEditor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vloMainAreasArticleUserArticleInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [query] 
         * @param {number} [count] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSearchArticlesGet: async (query?: string, count?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Articles/Article/SearchArticles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} articleId 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSetPicturePost: async (articleId: string, file: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleId' is not null or undefined
            assertParamExists('apiArticlesArticleSetPicturePost', 'articleId', articleId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('apiArticlesArticleSetPicturePost', 'file', file)
            const localVarPath = `/api/Articles/Article/SetPicture`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (articleId !== undefined) { 
                localVarFormParams.append('ArticleId', articleId as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('File', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VloMainAreasArticleArticleControllerArticleBoolInput} [vloMainAreasArticleArticleControllerArticleBoolInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSetPublicPut: async (vloMainAreasArticleArticleControllerArticleBoolInput?: VloMainAreasArticleArticleControllerArticleBoolInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Articles/Article/SetPublic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vloMainAreasArticleArticleControllerArticleBoolInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VloMainAreasArticleArticleControllerArticleDateInput} [vloMainAreasArticleArticleControllerArticleDateInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSetPublishDatePut: async (vloMainAreasArticleArticleControllerArticleDateInput?: VloMainAreasArticleArticleControllerArticleDateInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Articles/Article/SetPublishDate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vloMainAreasArticleArticleControllerArticleDateInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VloMainAreasArticleArticleControllerArticleTitleInput} [vloMainAreasArticleArticleControllerArticleTitleInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSetTitlePut: async (vloMainAreasArticleArticleControllerArticleTitleInput?: VloMainAreasArticleArticleControllerArticleTitleInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Articles/Article/SetTitle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vloMainAreasArticleArticleControllerArticleTitleInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArticleApi - functional programming interface
 * @export
 */
export const ArticleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ArticleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [content] 
         * @param {string} [articleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticlesArticleAddCommentPost(content?: string, articleId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticlesArticleAddCommentPost(content, articleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {VloMainAreasArticleUserArticleInput} [vloMainAreasArticleUserArticleInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticlesArticleAddEditorPut(vloMainAreasArticleUserArticleInput?: VloMainAreasArticleUserArticleInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticlesArticleAddEditorPut(vloMainAreasArticleUserArticleInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AccountsDataModelsDataModelsReactionType} [reactionType] 
         * @param {string} [articleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticlesArticleAddReactionPost(reactionType?: AccountsDataModelsDataModelsReactionType, articleId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticlesArticleAddReactionPost(reactionType, articleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [articleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticlesArticleGetArticleGet(articleId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsDataModelsDataModelsArticle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticlesArticleGetArticleGet(articleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [articleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticlesArticleGetContentGet(articleId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticlesArticleGetContentGet(articleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [articleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticlesArticleGetPictureGet(articleId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticlesArticleGetPictureGet(articleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [articleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticlesArticleGetTagsGet(articleId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountsDataModelsDataModelsTag>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticlesArticleGetTagsGet(articleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a blank article and returns its ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticlesArticlePost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticlesArticlePost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {VloMainAreasArticleArticleUpdateInput} [vloMainAreasArticleArticleUpdateInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticlesArticlePut(vloMainAreasArticleArticleUpdateInput?: VloMainAreasArticleArticleUpdateInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticlesArticlePut(vloMainAreasArticleArticleUpdateInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {VloMainAreasArticleUserArticleInput} [vloMainAreasArticleUserArticleInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticlesArticleRemoveEditorDelete(vloMainAreasArticleUserArticleInput?: VloMainAreasArticleUserArticleInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticlesArticleRemoveEditorDelete(vloMainAreasArticleUserArticleInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [query] 
         * @param {number} [count] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticlesArticleSearchArticlesGet(query?: string, count?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticlesArticleSearchArticlesGet(query, count, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} articleId 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticlesArticleSetPicturePost(articleId: string, file: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticlesArticleSetPicturePost(articleId, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {VloMainAreasArticleArticleControllerArticleBoolInput} [vloMainAreasArticleArticleControllerArticleBoolInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticlesArticleSetPublicPut(vloMainAreasArticleArticleControllerArticleBoolInput?: VloMainAreasArticleArticleControllerArticleBoolInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticlesArticleSetPublicPut(vloMainAreasArticleArticleControllerArticleBoolInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {VloMainAreasArticleArticleControllerArticleDateInput} [vloMainAreasArticleArticleControllerArticleDateInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticlesArticleSetPublishDatePut(vloMainAreasArticleArticleControllerArticleDateInput?: VloMainAreasArticleArticleControllerArticleDateInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticlesArticleSetPublishDatePut(vloMainAreasArticleArticleControllerArticleDateInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {VloMainAreasArticleArticleControllerArticleTitleInput} [vloMainAreasArticleArticleControllerArticleTitleInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticlesArticleSetTitlePut(vloMainAreasArticleArticleControllerArticleTitleInput?: VloMainAreasArticleArticleControllerArticleTitleInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticlesArticleSetTitlePut(vloMainAreasArticleArticleControllerArticleTitleInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ArticleApi - factory interface
 * @export
 */
export const ArticleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ArticleApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [content] 
         * @param {string} [articleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleAddCommentPost(content?: string, articleId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiArticlesArticleAddCommentPost(content, articleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VloMainAreasArticleUserArticleInput} [vloMainAreasArticleUserArticleInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleAddEditorPut(vloMainAreasArticleUserArticleInput?: VloMainAreasArticleUserArticleInput, options?: any): AxiosPromise<void> {
            return localVarFp.apiArticlesArticleAddEditorPut(vloMainAreasArticleUserArticleInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccountsDataModelsDataModelsReactionType} [reactionType] 
         * @param {string} [articleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleAddReactionPost(reactionType?: AccountsDataModelsDataModelsReactionType, articleId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiArticlesArticleAddReactionPost(reactionType, articleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [articleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleGetArticleGet(articleId?: string, options?: any): AxiosPromise<AccountsDataModelsDataModelsArticle> {
            return localVarFp.apiArticlesArticleGetArticleGet(articleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [articleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleGetContentGet(articleId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiArticlesArticleGetContentGet(articleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [articleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleGetPictureGet(articleId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiArticlesArticleGetPictureGet(articleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [articleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleGetTagsGet(articleId?: string, options?: any): AxiosPromise<Array<AccountsDataModelsDataModelsTag>> {
            return localVarFp.apiArticlesArticleGetTagsGet(articleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a blank article and returns its ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticlePost(options?: any): AxiosPromise<void> {
            return localVarFp.apiArticlesArticlePost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VloMainAreasArticleArticleUpdateInput} [vloMainAreasArticleArticleUpdateInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticlePut(vloMainAreasArticleArticleUpdateInput?: VloMainAreasArticleArticleUpdateInput, options?: any): AxiosPromise<void> {
            return localVarFp.apiArticlesArticlePut(vloMainAreasArticleArticleUpdateInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VloMainAreasArticleUserArticleInput} [vloMainAreasArticleUserArticleInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleRemoveEditorDelete(vloMainAreasArticleUserArticleInput?: VloMainAreasArticleUserArticleInput, options?: any): AxiosPromise<void> {
            return localVarFp.apiArticlesArticleRemoveEditorDelete(vloMainAreasArticleUserArticleInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [query] 
         * @param {number} [count] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSearchArticlesGet(query?: string, count?: number, offset?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiArticlesArticleSearchArticlesGet(query, count, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} articleId 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSetPicturePost(articleId: string, file: any, options?: any): AxiosPromise<void> {
            return localVarFp.apiArticlesArticleSetPicturePost(articleId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VloMainAreasArticleArticleControllerArticleBoolInput} [vloMainAreasArticleArticleControllerArticleBoolInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSetPublicPut(vloMainAreasArticleArticleControllerArticleBoolInput?: VloMainAreasArticleArticleControllerArticleBoolInput, options?: any): AxiosPromise<void> {
            return localVarFp.apiArticlesArticleSetPublicPut(vloMainAreasArticleArticleControllerArticleBoolInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VloMainAreasArticleArticleControllerArticleDateInput} [vloMainAreasArticleArticleControllerArticleDateInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSetPublishDatePut(vloMainAreasArticleArticleControllerArticleDateInput?: VloMainAreasArticleArticleControllerArticleDateInput, options?: any): AxiosPromise<void> {
            return localVarFp.apiArticlesArticleSetPublishDatePut(vloMainAreasArticleArticleControllerArticleDateInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VloMainAreasArticleArticleControllerArticleTitleInput} [vloMainAreasArticleArticleControllerArticleTitleInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSetTitlePut(vloMainAreasArticleArticleControllerArticleTitleInput?: VloMainAreasArticleArticleControllerArticleTitleInput, options?: any): AxiosPromise<void> {
            return localVarFp.apiArticlesArticleSetTitlePut(vloMainAreasArticleArticleControllerArticleTitleInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ArticleApi - object-oriented interface
 * @export
 * @class ArticleApi
 * @extends {BaseAPI}
 */
export class ArticleApi extends BaseAPI {
    /**
     * 
     * @param {string} [content] 
     * @param {string} [articleId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticlesArticleAddCommentPost(content?: string, articleId?: string, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticlesArticleAddCommentPost(content, articleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VloMainAreasArticleUserArticleInput} [vloMainAreasArticleUserArticleInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticlesArticleAddEditorPut(vloMainAreasArticleUserArticleInput?: VloMainAreasArticleUserArticleInput, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticlesArticleAddEditorPut(vloMainAreasArticleUserArticleInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountsDataModelsDataModelsReactionType} [reactionType] 
     * @param {string} [articleId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticlesArticleAddReactionPost(reactionType?: AccountsDataModelsDataModelsReactionType, articleId?: string, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticlesArticleAddReactionPost(reactionType, articleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [articleId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticlesArticleGetArticleGet(articleId?: string, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticlesArticleGetArticleGet(articleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [articleId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticlesArticleGetContentGet(articleId?: string, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticlesArticleGetContentGet(articleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [articleId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticlesArticleGetPictureGet(articleId?: string, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticlesArticleGetPictureGet(articleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [articleId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticlesArticleGetTagsGet(articleId?: string, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticlesArticleGetTagsGet(articleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a blank article and returns its ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticlesArticlePost(options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticlesArticlePost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VloMainAreasArticleArticleUpdateInput} [vloMainAreasArticleArticleUpdateInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticlesArticlePut(vloMainAreasArticleArticleUpdateInput?: VloMainAreasArticleArticleUpdateInput, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticlesArticlePut(vloMainAreasArticleArticleUpdateInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VloMainAreasArticleUserArticleInput} [vloMainAreasArticleUserArticleInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticlesArticleRemoveEditorDelete(vloMainAreasArticleUserArticleInput?: VloMainAreasArticleUserArticleInput, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticlesArticleRemoveEditorDelete(vloMainAreasArticleUserArticleInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [query] 
     * @param {number} [count] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticlesArticleSearchArticlesGet(query?: string, count?: number, offset?: number, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticlesArticleSearchArticlesGet(query, count, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} articleId 
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticlesArticleSetPicturePost(articleId: string, file: any, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticlesArticleSetPicturePost(articleId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VloMainAreasArticleArticleControllerArticleBoolInput} [vloMainAreasArticleArticleControllerArticleBoolInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticlesArticleSetPublicPut(vloMainAreasArticleArticleControllerArticleBoolInput?: VloMainAreasArticleArticleControllerArticleBoolInput, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticlesArticleSetPublicPut(vloMainAreasArticleArticleControllerArticleBoolInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VloMainAreasArticleArticleControllerArticleDateInput} [vloMainAreasArticleArticleControllerArticleDateInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticlesArticleSetPublishDatePut(vloMainAreasArticleArticleControllerArticleDateInput?: VloMainAreasArticleArticleControllerArticleDateInput, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticlesArticleSetPublishDatePut(vloMainAreasArticleArticleControllerArticleDateInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VloMainAreasArticleArticleControllerArticleTitleInput} [vloMainAreasArticleArticleControllerArticleTitleInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticlesArticleSetTitlePut(vloMainAreasArticleArticleControllerArticleTitleInput?: VloMainAreasArticleArticleControllerArticleTitleInput, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticlesArticleSetTitlePut(vloMainAreasArticleArticleControllerArticleTitleInput, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FileApi - axios parameter creator
 * @export
 */
export const FileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [folderId] 
         * @param {string} [fileId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileAddSubFilePost: async (folderId?: string, fileId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FileManagement/File/AddSubFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (folderId !== undefined) {
                localVarQueryParameter['FolderId'] = folderId;
            }

            if (fileId !== undefined) {
                localVarQueryParameter['FileId'] = fileId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [parentId] 
         * @param {string} [childId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileAddSubFolderPost: async (parentId?: string, childId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FileManagement/File/AddSubFolder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (parentId !== undefined) {
                localVarQueryParameter['ParentId'] = parentId;
            }

            if (childId !== undefined) {
                localVarQueryParameter['ChildId'] = childId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileCreateFolderPost: async (name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FileManagement/File/CreateFolder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [fileId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileDeleteFileDelete: async (fileId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FileManagement/File/DeleteFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileId !== undefined) {
                localVarQueryParameter['fileId'] = fileId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [folderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileDeleteFolderDelete: async (folderId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FileManagement/File/DeleteFolder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (folderId !== undefined) {
                localVarQueryParameter['FolderId'] = folderId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileGetFileGet: async (id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FileManagement/File/GetFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileGetFilesInfoGet: async (id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FileManagement/File/GetFilesInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileGetMyArticlesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FileManagement/File/GetMyArticles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileGetUserFoldersFilesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FileManagement/File/GetUserFoldersFiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [folderId] 
         * @param {string} [fileId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileRemoveSubFileDelete: async (folderId?: string, fileId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FileManagement/File/RemoveSubFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (folderId !== undefined) {
                localVarQueryParameter['FolderId'] = folderId;
            }

            if (fileId !== undefined) {
                localVarQueryParameter['FileId'] = fileId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [parentId] 
         * @param {string} [childId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileRemoveSubFolderDelete: async (parentId?: string, childId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FileManagement/File/RemoveSubFolder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (parentId !== undefined) {
                localVarQueryParameter['ParentId'] = parentId;
            }

            if (childId !== undefined) {
                localVarQueryParameter['ChildId'] = childId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} [isPublic] 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileUploadFilePost: async (isPublic?: boolean, file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FileManagement/File/UploadFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (isPublic !== undefined) {
                localVarQueryParameter['isPublic'] = isPublic;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileApi - functional programming interface
 * @export
 */
export const FileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [folderId] 
         * @param {string} [fileId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFileManagementFileAddSubFilePost(folderId?: string, fileId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFileManagementFileAddSubFilePost(folderId, fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [parentId] 
         * @param {string} [childId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFileManagementFileAddSubFolderPost(parentId?: string, childId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFileManagementFileAddSubFolderPost(parentId, childId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFileManagementFileCreateFolderPost(name?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFileManagementFileCreateFolderPost(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [fileId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFileManagementFileDeleteFileDelete(fileId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFileManagementFileDeleteFileDelete(fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [folderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFileManagementFileDeleteFolderDelete(folderId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFileManagementFileDeleteFolderDelete(folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFileManagementFileGetFileGet(id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFileManagementFileGetFileGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFileManagementFileGetFilesInfoGet(id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsDataModelsDataModelsFile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFileManagementFileGetFilesInfoGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFileManagementFileGetMyArticlesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountsDataModelsDataModelsArticle>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFileManagementFileGetMyArticlesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFileManagementFileGetUserFoldersFilesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFileManagementFileGetUserFoldersFilesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [folderId] 
         * @param {string} [fileId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFileManagementFileRemoveSubFileDelete(folderId?: string, fileId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFileManagementFileRemoveSubFileDelete(folderId, fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [parentId] 
         * @param {string} [childId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFileManagementFileRemoveSubFolderDelete(parentId?: string, childId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFileManagementFileRemoveSubFolderDelete(parentId, childId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {boolean} [isPublic] 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFileManagementFileUploadFilePost(isPublic?: boolean, file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFileManagementFileUploadFilePost(isPublic, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FileApi - factory interface
 * @export
 */
export const FileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [folderId] 
         * @param {string} [fileId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileAddSubFilePost(folderId?: string, fileId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiFileManagementFileAddSubFilePost(folderId, fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [parentId] 
         * @param {string} [childId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileAddSubFolderPost(parentId?: string, childId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiFileManagementFileAddSubFolderPost(parentId, childId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileCreateFolderPost(name?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiFileManagementFileCreateFolderPost(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [fileId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileDeleteFileDelete(fileId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiFileManagementFileDeleteFileDelete(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [folderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileDeleteFolderDelete(folderId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiFileManagementFileDeleteFolderDelete(folderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileGetFileGet(id?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiFileManagementFileGetFileGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileGetFilesInfoGet(id?: string, options?: any): AxiosPromise<AccountsDataModelsDataModelsFile> {
            return localVarFp.apiFileManagementFileGetFilesInfoGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileGetMyArticlesGet(options?: any): AxiosPromise<Array<AccountsDataModelsDataModelsArticle>> {
            return localVarFp.apiFileManagementFileGetMyArticlesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileGetUserFoldersFilesGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiFileManagementFileGetUserFoldersFilesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [folderId] 
         * @param {string} [fileId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileRemoveSubFileDelete(folderId?: string, fileId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiFileManagementFileRemoveSubFileDelete(folderId, fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [parentId] 
         * @param {string} [childId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileRemoveSubFolderDelete(parentId?: string, childId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiFileManagementFileRemoveSubFolderDelete(parentId, childId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} [isPublic] 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileUploadFilePost(isPublic?: boolean, file?: any, options?: any): AxiosPromise<string> {
            return localVarFp.apiFileManagementFileUploadFilePost(isPublic, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
export class FileApi extends BaseAPI {
    /**
     * 
     * @param {string} [folderId] 
     * @param {string} [fileId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public apiFileManagementFileAddSubFilePost(folderId?: string, fileId?: string, options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).apiFileManagementFileAddSubFilePost(folderId, fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [parentId] 
     * @param {string} [childId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public apiFileManagementFileAddSubFolderPost(parentId?: string, childId?: string, options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).apiFileManagementFileAddSubFolderPost(parentId, childId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public apiFileManagementFileCreateFolderPost(name?: string, options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).apiFileManagementFileCreateFolderPost(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [fileId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public apiFileManagementFileDeleteFileDelete(fileId?: string, options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).apiFileManagementFileDeleteFileDelete(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [folderId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public apiFileManagementFileDeleteFolderDelete(folderId?: string, options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).apiFileManagementFileDeleteFolderDelete(folderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public apiFileManagementFileGetFileGet(id?: string, options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).apiFileManagementFileGetFileGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public apiFileManagementFileGetFilesInfoGet(id?: string, options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).apiFileManagementFileGetFilesInfoGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public apiFileManagementFileGetMyArticlesGet(options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).apiFileManagementFileGetMyArticlesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public apiFileManagementFileGetUserFoldersFilesGet(options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).apiFileManagementFileGetUserFoldersFilesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [folderId] 
     * @param {string} [fileId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public apiFileManagementFileRemoveSubFileDelete(folderId?: string, fileId?: string, options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).apiFileManagementFileRemoveSubFileDelete(folderId, fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [parentId] 
     * @param {string} [childId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public apiFileManagementFileRemoveSubFolderDelete(parentId?: string, childId?: string, options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).apiFileManagementFileRemoveSubFolderDelete(parentId, childId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {boolean} [isPublic] 
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public apiFileManagementFileUploadFilePost(isPublic?: boolean, file?: any, options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).apiFileManagementFileUploadFilePost(isPublic, file, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TagApi - axios parameter creator
 * @export
 */
export const TagApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [articleId] 
         * @param {string} [tagContent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsTagAddToArticlePost: async (articleId?: string, tagContent?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Tags/Tag/AddToArticle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (articleId !== undefined) {
                localVarQueryParameter['articleId'] = articleId;
            }

            if (tagContent !== undefined) {
                localVarQueryParameter['tagContent'] = tagContent;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [tagContent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsTagPost: async (tagContent?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Tags/Tag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tagContent !== undefined) {
                localVarQueryParameter['tagContent'] = tagContent;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [articleId] 
         * @param {string} [tagContent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsTagRemoveFromArticleDelete: async (articleId?: string, tagContent?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Tags/Tag/RemoveFromArticle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (articleId !== undefined) {
                localVarQueryParameter['articleId'] = articleId;
            }

            if (tagContent !== undefined) {
                localVarQueryParameter['tagContent'] = tagContent;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsTagSearchGet: async (query?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Tags/Tag/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagApi - functional programming interface
 * @export
 */
export const TagApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TagApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [articleId] 
         * @param {string} [tagContent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTagsTagAddToArticlePost(articleId?: string, tagContent?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTagsTagAddToArticlePost(articleId, tagContent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [tagContent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTagsTagPost(tagContent?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTagsTagPost(tagContent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [articleId] 
         * @param {string} [tagContent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTagsTagRemoveFromArticleDelete(articleId?: string, tagContent?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTagsTagRemoveFromArticleDelete(articleId, tagContent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTagsTagSearchGet(query?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTagsTagSearchGet(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TagApi - factory interface
 * @export
 */
export const TagApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TagApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [articleId] 
         * @param {string} [tagContent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsTagAddToArticlePost(articleId?: string, tagContent?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiTagsTagAddToArticlePost(articleId, tagContent, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [tagContent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsTagPost(tagContent?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiTagsTagPost(tagContent, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [articleId] 
         * @param {string} [tagContent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsTagRemoveFromArticleDelete(articleId?: string, tagContent?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiTagsTagRemoveFromArticleDelete(articleId, tagContent, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsTagSearchGet(query?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiTagsTagSearchGet(query, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TagApi - object-oriented interface
 * @export
 * @class TagApi
 * @extends {BaseAPI}
 */
export class TagApi extends BaseAPI {
    /**
     * 
     * @param {string} [articleId] 
     * @param {string} [tagContent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public apiTagsTagAddToArticlePost(articleId?: string, tagContent?: string, options?: AxiosRequestConfig) {
        return TagApiFp(this.configuration).apiTagsTagAddToArticlePost(articleId, tagContent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [tagContent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public apiTagsTagPost(tagContent?: string, options?: AxiosRequestConfig) {
        return TagApiFp(this.configuration).apiTagsTagPost(tagContent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [articleId] 
     * @param {string} [tagContent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public apiTagsTagRemoveFromArticleDelete(articleId?: string, tagContent?: string, options?: AxiosRequestConfig) {
        return TagApiFp(this.configuration).apiTagsTagRemoveFromArticleDelete(articleId, tagContent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [query] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public apiTagsTagSearchGet(query?: string, options?: AxiosRequestConfig) {
        return TagApiFp(this.configuration).apiTagsTagSearchGet(query, options).then((request) => request(this.axios, this.basePath));
    }
}


