/* tslint:disable */
/* eslint-disable */
/**
 * ASP.NETCore_suvlo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: gkjuszczyk@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccountsDataModelsDataModelsApplicationUser
 */
export interface AccountsDataModelsDataModelsApplicationUser {
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'userName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'normalizedUserName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'normalizedEmail'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'emailConfirmed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'phoneNumberConfirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'twoFactorEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'lockoutEnd'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'lockoutEnabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'accessFailedCount'?: number;
    /**
     * 
     * @type {AccountsDataModelsDataModelsProfilePicture}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'profilePicture'?: AccountsDataModelsDataModelsProfilePicture;
    /**
     * 
     * @type {number}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'socialCredit'?: number;
    /**
     * 
     * @type {Array<AccountsDataModelsDataModelsArticle>}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'articles'?: Array<AccountsDataModelsDataModelsArticle> | null;
    /**
     * 
     * @type {number}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'usedBytes'?: number;
    /**
     * 
     * @type {number}
     * @memberof AccountsDataModelsDataModelsApplicationUser
     */
    'maxBytes'?: number;
}
/**
 * 
 * @export
 * @interface AccountsDataModelsDataModelsArticle
 */
export interface AccountsDataModelsDataModelsArticle {
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'articleId'?: string | null;
    /**
     * 
     * @type {AccountsDataModelsDataModelsApplicationUser}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'author'?: AccountsDataModelsDataModelsApplicationUser;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'title'?: string | null;
    /**
     * 
     * @type {Array<AccountsDataModelsDataModelsTag>}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'tags'?: Array<AccountsDataModelsDataModelsTag> | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'modifiedOn'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'public'?: boolean;
    /**
     * 
     * @type {Array<AccountsDataModelsDataModelsApplicationUser>}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'editors'?: Array<AccountsDataModelsDataModelsApplicationUser> | null;
    /**
     * 
     * @type {Array<AccountsDataModelsDataModelsApplicationUser>}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'reviewers'?: Array<AccountsDataModelsDataModelsApplicationUser> | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'contentJson'?: string | null;
    /**
     * 
     * @type {Array<Revision>}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'revisions'?: Array<Revision> | null;
    /**
     * 
     * @type {boolean}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'autoPublish'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'autoPublishOn'?: string;
    /**
     * 
     * @type {AccountsDataModelsDataModelsFile}
     * @memberof AccountsDataModelsDataModelsArticle
     */
    'picture'?: AccountsDataModelsDataModelsFile;
}
/**
 * 
 * @export
 * @interface AccountsDataModelsDataModelsFile
 */
export interface AccountsDataModelsDataModelsFile {
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsFile
     */
    'objectId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsFile
     */
    'bucket'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AccountsDataModelsDataModelsFile
     */
    'backedInMinio'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AccountsDataModelsDataModelsFile
     */
    'userManageable'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AccountsDataModelsDataModelsFile
     */
    'public'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsFile
     */
    'fileName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsFile
     */
    'contentType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsFile
     */
    'ownerId'?: string | null;
    /**
     * 
     * @type {AccountsDataModelsDataModelsApplicationUser}
     * @memberof AccountsDataModelsDataModelsFile
     */
    'owner'?: AccountsDataModelsDataModelsApplicationUser;
    /**
     * 
     * @type {number}
     * @memberof AccountsDataModelsDataModelsFile
     */
    'byteSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsFile
     */
    'parentId'?: string | null;
    /**
     * 
     * @type {AccountsDataModelsDataModelsFolder}
     * @memberof AccountsDataModelsDataModelsFile
     */
    'parent'?: AccountsDataModelsDataModelsFolder;
}
/**
 * 
 * @export
 * @interface AccountsDataModelsDataModelsFolder
 */
export interface AccountsDataModelsDataModelsFolder {
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsFolder
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsFolder
     */
    'ownerId'?: string | null;
    /**
     * 
     * @type {AccountsDataModelsDataModelsApplicationUser}
     * @memberof AccountsDataModelsDataModelsFolder
     */
    'owner'?: AccountsDataModelsDataModelsApplicationUser;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsFolder
     */
    'masterFolderId'?: string | null;
    /**
     * 
     * @type {AccountsDataModelsDataModelsFolder}
     * @memberof AccountsDataModelsDataModelsFolder
     */
    'masterFolder'?: AccountsDataModelsDataModelsFolder;
}
/**
 * 
 * @export
 * @interface AccountsDataModelsDataModelsProfilePicture
 */
export interface AccountsDataModelsDataModelsProfilePicture {
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsProfilePicture
     */
    'id'?: string | null;
    /**
     * 
     * @type {AccountsDataModelsDataModelsFile}
     * @memberof AccountsDataModelsDataModelsProfilePicture
     */
    'picture'?: AccountsDataModelsDataModelsFile;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsProfilePicture
     */
    'ownerId'?: string | null;
    /**
     * 
     * @type {AccountsDataModelsDataModelsApplicationUser}
     * @memberof AccountsDataModelsDataModelsProfilePicture
     */
    'owner'?: AccountsDataModelsDataModelsApplicationUser;
}
/**
 * 
 * @export
 * @interface AccountsDataModelsDataModelsTag
 */
export interface AccountsDataModelsDataModelsTag {
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsTag
     */
    'id'?: string | null;
    /**
     * 
     * @type {AccountsDataModelsDataModelsApplicationUser}
     * @memberof AccountsDataModelsDataModelsTag
     */
    'author'?: AccountsDataModelsDataModelsApplicationUser;
    /**
     * 
     * @type {string}
     * @memberof AccountsDataModelsDataModelsTag
     */
    'content'?: string | null;
}
/**
 * 
 * @export
 * @interface Revision
 */
export interface Revision {
    /**
     * 
     * @type {string}
     * @memberof Revision
     */
    'revisionId'?: string | null;
    /**
     * 
     * @type {AccountsDataModelsDataModelsApplicationUser}
     * @memberof Revision
     */
    'author'?: AccountsDataModelsDataModelsApplicationUser;
    /**
     * 
     * @type {string}
     * @memberof Revision
     */
    'contentJson'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Revision
     */
    'modifiedOn'?: string;
}
/**
 * 
 * @export
 * @interface VloMainAreasArticleArticleControllerArticleTitleInput
 */
export interface VloMainAreasArticleArticleControllerArticleTitleInput {
    /**
     * 
     * @type {string}
     * @memberof VloMainAreasArticleArticleControllerArticleTitleInput
     */
    'articleId': string;
    /**
     * 
     * @type {string}
     * @memberof VloMainAreasArticleArticleControllerArticleTitleInput
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface VloMainAreasArticleArticleUpdateInput
 */
export interface VloMainAreasArticleArticleUpdateInput {
    /**
     * 
     * @type {string}
     * @memberof VloMainAreasArticleArticleUpdateInput
     */
    'articleId': string;
    /**
     * 
     * @type {string}
     * @memberof VloMainAreasArticleArticleUpdateInput
     */
    'contentJson': string;
}
/**
 * 
 * @export
 * @interface VloMainAreasArticleUserArticleInput
 */
export interface VloMainAreasArticleUserArticleInput {
    /**
     * 
     * @type {string}
     * @memberof VloMainAreasArticleUserArticleInput
     */
    'articleId': string;
    /**
     * 
     * @type {string}
     * @memberof VloMainAreasArticleUserArticleInput
     */
    'userId': string;
}

/**
 * ArticleApi - axios parameter creator
 * @export
 */
export const ArticleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {VloMainAreasArticleUserArticleInput} [vloMainAreasArticleUserArticleInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleAddEditorPut: async (vloMainAreasArticleUserArticleInput?: VloMainAreasArticleUserArticleInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Articles/Article/AddEditor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vloMainAreasArticleUserArticleInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [articleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleGetArticleGet: async (articleId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Articles/Article/GetArticle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (articleId !== undefined) {
                localVarQueryParameter['ArticleId'] = articleId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [articleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleGetContentGet: async (articleId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Articles/Article/GetContent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (articleId !== undefined) {
                localVarQueryParameter['ArticleId'] = articleId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [articleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleGetPictureGet: async (articleId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Articles/Article/GetPicture`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (articleId !== undefined) {
                localVarQueryParameter['ArticleId'] = articleId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a blank article and returns its ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticlePost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Articles/Article`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VloMainAreasArticleArticleUpdateInput} [vloMainAreasArticleArticleUpdateInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticlePut: async (vloMainAreasArticleArticleUpdateInput?: VloMainAreasArticleArticleUpdateInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Articles/Article`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vloMainAreasArticleArticleUpdateInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VloMainAreasArticleUserArticleInput} [vloMainAreasArticleUserArticleInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleRemoveEditorDelete: async (vloMainAreasArticleUserArticleInput?: VloMainAreasArticleUserArticleInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Articles/Article/RemoveEditor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vloMainAreasArticleUserArticleInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} articleId 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSetPicturePost: async (articleId: string, file: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleId' is not null or undefined
            assertParamExists('apiArticlesArticleSetPicturePost', 'articleId', articleId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('apiArticlesArticleSetPicturePost', 'file', file)
            const localVarPath = `/api/Articles/Article/SetPicture`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (articleId !== undefined) { 
                localVarFormParams.append('ArticleId', articleId as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('File', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VloMainAreasArticleArticleControllerArticleTitleInput} [vloMainAreasArticleArticleControllerArticleTitleInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSetTitlePut: async (vloMainAreasArticleArticleControllerArticleTitleInput?: VloMainAreasArticleArticleControllerArticleTitleInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Articles/Article/SetTitle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vloMainAreasArticleArticleControllerArticleTitleInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArticleApi - functional programming interface
 * @export
 */
export const ArticleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ArticleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {VloMainAreasArticleUserArticleInput} [vloMainAreasArticleUserArticleInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticlesArticleAddEditorPut(vloMainAreasArticleUserArticleInput?: VloMainAreasArticleUserArticleInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticlesArticleAddEditorPut(vloMainAreasArticleUserArticleInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [articleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticlesArticleGetArticleGet(articleId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsDataModelsDataModelsArticle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticlesArticleGetArticleGet(articleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [articleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticlesArticleGetContentGet(articleId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticlesArticleGetContentGet(articleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [articleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticlesArticleGetPictureGet(articleId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticlesArticleGetPictureGet(articleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a blank article and returns its ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticlesArticlePost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticlesArticlePost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {VloMainAreasArticleArticleUpdateInput} [vloMainAreasArticleArticleUpdateInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticlesArticlePut(vloMainAreasArticleArticleUpdateInput?: VloMainAreasArticleArticleUpdateInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticlesArticlePut(vloMainAreasArticleArticleUpdateInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {VloMainAreasArticleUserArticleInput} [vloMainAreasArticleUserArticleInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticlesArticleRemoveEditorDelete(vloMainAreasArticleUserArticleInput?: VloMainAreasArticleUserArticleInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticlesArticleRemoveEditorDelete(vloMainAreasArticleUserArticleInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} articleId 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticlesArticleSetPicturePost(articleId: string, file: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticlesArticleSetPicturePost(articleId, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {VloMainAreasArticleArticleControllerArticleTitleInput} [vloMainAreasArticleArticleControllerArticleTitleInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticlesArticleSetTitlePut(vloMainAreasArticleArticleControllerArticleTitleInput?: VloMainAreasArticleArticleControllerArticleTitleInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticlesArticleSetTitlePut(vloMainAreasArticleArticleControllerArticleTitleInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ArticleApi - factory interface
 * @export
 */
export const ArticleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ArticleApiFp(configuration)
    return {
        /**
         * 
         * @param {VloMainAreasArticleUserArticleInput} [vloMainAreasArticleUserArticleInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleAddEditorPut(vloMainAreasArticleUserArticleInput?: VloMainAreasArticleUserArticleInput, options?: any): AxiosPromise<void> {
            return localVarFp.apiArticlesArticleAddEditorPut(vloMainAreasArticleUserArticleInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [articleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleGetArticleGet(articleId?: string, options?: any): AxiosPromise<AccountsDataModelsDataModelsArticle> {
            return localVarFp.apiArticlesArticleGetArticleGet(articleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [articleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleGetContentGet(articleId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiArticlesArticleGetContentGet(articleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [articleId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleGetPictureGet(articleId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiArticlesArticleGetPictureGet(articleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a blank article and returns its ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticlePost(options?: any): AxiosPromise<void> {
            return localVarFp.apiArticlesArticlePost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VloMainAreasArticleArticleUpdateInput} [vloMainAreasArticleArticleUpdateInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticlePut(vloMainAreasArticleArticleUpdateInput?: VloMainAreasArticleArticleUpdateInput, options?: any): AxiosPromise<void> {
            return localVarFp.apiArticlesArticlePut(vloMainAreasArticleArticleUpdateInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VloMainAreasArticleUserArticleInput} [vloMainAreasArticleUserArticleInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleRemoveEditorDelete(vloMainAreasArticleUserArticleInput?: VloMainAreasArticleUserArticleInput, options?: any): AxiosPromise<void> {
            return localVarFp.apiArticlesArticleRemoveEditorDelete(vloMainAreasArticleUserArticleInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} articleId 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSetPicturePost(articleId: string, file: any, options?: any): AxiosPromise<void> {
            return localVarFp.apiArticlesArticleSetPicturePost(articleId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VloMainAreasArticleArticleControllerArticleTitleInput} [vloMainAreasArticleArticleControllerArticleTitleInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSetTitlePut(vloMainAreasArticleArticleControllerArticleTitleInput?: VloMainAreasArticleArticleControllerArticleTitleInput, options?: any): AxiosPromise<void> {
            return localVarFp.apiArticlesArticleSetTitlePut(vloMainAreasArticleArticleControllerArticleTitleInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ArticleApi - object-oriented interface
 * @export
 * @class ArticleApi
 * @extends {BaseAPI}
 */
export class ArticleApi extends BaseAPI {
    /**
     * 
     * @param {VloMainAreasArticleUserArticleInput} [vloMainAreasArticleUserArticleInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticlesArticleAddEditorPut(vloMainAreasArticleUserArticleInput?: VloMainAreasArticleUserArticleInput, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticlesArticleAddEditorPut(vloMainAreasArticleUserArticleInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [articleId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticlesArticleGetArticleGet(articleId?: string, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticlesArticleGetArticleGet(articleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [articleId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticlesArticleGetContentGet(articleId?: string, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticlesArticleGetContentGet(articleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [articleId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticlesArticleGetPictureGet(articleId?: string, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticlesArticleGetPictureGet(articleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a blank article and returns its ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticlesArticlePost(options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticlesArticlePost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VloMainAreasArticleArticleUpdateInput} [vloMainAreasArticleArticleUpdateInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticlesArticlePut(vloMainAreasArticleArticleUpdateInput?: VloMainAreasArticleArticleUpdateInput, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticlesArticlePut(vloMainAreasArticleArticleUpdateInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VloMainAreasArticleUserArticleInput} [vloMainAreasArticleUserArticleInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticlesArticleRemoveEditorDelete(vloMainAreasArticleUserArticleInput?: VloMainAreasArticleUserArticleInput, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticlesArticleRemoveEditorDelete(vloMainAreasArticleUserArticleInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} articleId 
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticlesArticleSetPicturePost(articleId: string, file: any, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticlesArticleSetPicturePost(articleId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VloMainAreasArticleArticleControllerArticleTitleInput} [vloMainAreasArticleArticleControllerArticleTitleInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticlesArticleSetTitlePut(vloMainAreasArticleArticleControllerArticleTitleInput?: VloMainAreasArticleArticleControllerArticleTitleInput, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticlesArticleSetTitlePut(vloMainAreasArticleArticleControllerArticleTitleInput, options).then((request) => request(this.axios, this.basePath));
    }
}


